/* automatically generated by rust-bindgen */
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]

extern crate libc;

pub type Enum_VjdStat = libc::c_uint;
pub const VJD_STAT_OWN: libc::c_uint = 0;
pub const VJD_STAT_FREE: libc::c_uint = 1;
pub const VJD_STAT_BUSY: libc::c_uint = 2;
pub const VJD_STAT_MISS: libc::c_uint = 3;
pub const VJD_STAT_UNKN: libc::c_uint = 4;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_DEV_INFO {
    pub DeviceID: libc::c_uchar,
    pub nImplemented: libc::c_uchar,
    pub isImplemented: libc::c_uchar,
    pub MaxDevices: libc::c_uchar,
    pub DriverFFB: libc::c_uchar,
    pub DeviceFFB: libc::c_uchar,
}
impl ::std::clone::Clone for Struct_DEV_INFO {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_DEV_INFO {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type RemovalCB =
    ::std::option::Option<extern "C" fn(arg1: libc::c_int,
                                        arg2: libc::c_int,
                                        arg3: *mut libc::c_void) -> ()>;

#[link(name = "vjoyinterface")]
extern "C" {
    pub fn GetvJoyVersion() -> libc::c_short;
    pub fn vJoyEnabled() -> libc::c_int;
    pub fn GetvJoyProductString() -> *mut libc::c_void;
    pub fn GetvJoyManufacturerString() -> *mut libc::c_void;
    pub fn GetvJoySerialNumberString() -> *mut libc::c_void;
    pub fn DriverMatch(DllVer: *mut libc::c_ushort,
                       DrvVer: *mut libc::c_ushort) -> libc::c_int;
    pub fn RegisterRemovalCB(cb: RemovalCB, data: *mut libc::c_void) -> ();
    pub fn GetVJDButtonNumber(rID: libc::c_uint) -> libc::c_int;
    pub fn GetVJDDiscPovNumber(rID: libc::c_uint) -> libc::c_int;
    pub fn GetVJDContPovNumber(rID: libc::c_uint) -> libc::c_int;
    pub fn GetVJDAxisExist(rID: libc::c_uint, Axis: libc::c_uint)
     -> libc::c_int;
    pub fn GetVJDAxisMax(rID: libc::c_uint, Axis: libc::c_uint,
                         Max: *mut libc::c_long) -> libc::c_int;
    pub fn GetVJDAxisMin(rID: libc::c_uint, Axis: libc::c_uint,
                         Min: *mut libc::c_long) -> libc::c_int;
    pub fn AcquireVJD(rID: libc::c_uint) -> libc::c_int;
    pub fn RelinquishVJD(rID: libc::c_uint) -> ();
    pub fn UpdateVJD(rID: libc::c_uint, pData: *mut libc::c_void)
     -> libc::c_int;
    pub fn GetVJDStatus(rID: libc::c_uint) -> Enum_VjdStat;
    pub fn ResetVJD(rID: libc::c_uint) -> libc::c_int;
    pub fn ResetAll() -> ();
    pub fn ResetButtons(rID: libc::c_uint) -> libc::c_int;
    pub fn ResetPovs(rID: libc::c_uint) -> libc::c_int;
    pub fn SetAxis(Value: libc::c_long, rID: libc::c_uint,
                   Axis: libc::c_uint) -> libc::c_int;
    pub fn SetBtn(Value: libc::c_int, rID: libc::c_uint,
                  nBtn: libc::c_uchar) -> libc::c_int;
    pub fn SetDiscPov(Value: libc::c_int, rID: libc::c_uint,
                      nPov: libc::c_uchar) -> libc::c_int;
    pub fn SetContPov(Value: libc::c_ulong, rID: libc::c_uint,
                      nPov: libc::c_uchar) -> libc::c_int;
}
